## Indic Parler-TTS

:::: columns

::: {.column width="65%"}
The Indic Parler-TTS project delivered a cutting-edge multilingual text-to-speech model capable of synthesizing speech across 21 languages, encompassing 20 Indic languages alongside English. Built upon the robust Parler-TTS architecture, this model empowers users with fine-grained control over various speech characteristics through the use of descriptive text prompts. This sophisticated approach enables the generation of highly nuanced and natural-sounding speech, catering to the diverse linguistic needs of a multilingual user base.

:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
![Indic Parler-TTS](https://huggingface.co/datasets/parler-tts/images/resolve/main/Indic%20Parler-TTS.png)
:::

My primary role involved curating and preparing the 8,385-hour multilingual speech dataset. This included data gathering, cleaning, and detailed caption annotation, crucial for the model's ability to produce nuanced speech.

I was involved in the experimental phase, helping with training setup, monitoring performance, and analyzing results. I contributed to refining training strategies and troubleshooting issues. My observations on model performance also helped guide the project, contributing to a successful multilingual TTS solution.

[Read more](https://huggingface.co/ai4bharat/indic-parler-tts/){target="_blank" .button}

::::

## BDM Capstone Project: Decoding Real-World Business Challenges

:::: columns

::: {.column width="30%"}
![Plot showing Sales during Various Time slots](images/time_slot.png)
:::

::: {.column width="5%"}
:::

::: {.column width="65%"}

Embark on a journey through my Business Data Management (BDM) Capstone Project, where I tackled substantial business issues in collaboration with a Cafe. From formulating a comprehensive proposal to presenting compelling insights in the final report, the project scored an impressive total of 92. Delve into the anonymized reports and witness the intersection of data science and practical problem-solving.

[Read more](https://sherrys997.github.io/BDM-Project/){target="_blank" .button}

:::

::::

## Machine Learning Algorithms

:::: columns

::: {.column width="65%"}
This website is a comprehensive resource for machine learning algorithms. Here, you will find explanations of the most popular algorithms, as well as code implementations in Python.

The website is divided into two main sections: supervised learning and unsupervised learning. Supervised learning algorithms are used to learn from labeled data, while unsupervised learning algorithms are used to learn from unlabeled data.

[Read more](https://sherrys997.github.io/Machine-Learning-Algorithms/){target="_blank" .button}


:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
![Machine Learning Algorithms](https://cdn1.vogel.de/unsafe/540x0/smart/images.vogel.de/vogelonline/bdb/1529600/1529612/original.jpg)
:::

::::

## BlogLite v2

:::: columns

::: {.column width="30%"}
![Blog Lite v2](images/bloglitev2.png)
:::

::: {.column width="5%"}
:::

::: {.column width="65%"}
Blog-Lite is a web app created with Vue3 and python-flask that lets users create and share text and image blogs. Users can follow, search and comment on other blogs. It also has a Rest API for limited data access and modification.

**Repo Link**: [https://github.com/SherryS997/Blog-Lite-v2](https://github.com/SherryS997/Blog-Lite-v2){target="_blank" .button}
:::

::::

## Building a Cat Image Classifier using Neural Networks from Scratch

:::: columns

::: {.column width="65%"}
This project showcases the implementation of deep learning algorithms from scratch for cat image classification using NumPy and SciPy in Python. 

The neural network architecture is developed within a Jupyter Notebook, emphasizing the creation of layers, activation functions like ReLU and Sigmoid, and training procedures. 

Quarto is utilized to convert the notebook into a webpage, presenting an accessible overview of the custom-built deep learning algorithms employed in the classification of cat images.

[Read more](https://sherrys997.github.io/Cat-Image-Classification-Neural-Network-using-NumPy-and-SciPy/Cat_classifier.html){target="_blank" .button}

:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
![Cat](https://c.pxhere.com/photos/fa/1e/photo-73487.jpg!d)
:::

::::

## Exploring Regularization Techniques in Neural Networks for French Football Corporation

:::: columns

::: {.column width="30%"}
![Field Tactic Image](images/field_kiank.png)
:::

::: {.column width="5%"}
:::

::: {.column width="65%"}
This project explores the implementation of deep learning algorithms, focusing on neural networks and regularization techniques like L2 and Dropout, applied to optimize ball kicking positions for French football players. 

The project was primarily built using Python's NumPy and SciPy libraries to create the neural network from scratch. 

The notebook has been converted into a webpage using Quarto.

[Read more](https://sherrys997.github.io/French-Football-AI-Analysis){target="_blank" .button}

:::

::::

## Neural Image Style Transfer using PyTorch

:::: columns

::: {.column width="65%"}
This project shows how we can use PyTorch to mix different artistic styles in images using something called neural image style transfer. It's like blending different painting styles onto different pictures. 

It talks about using pre-trained VGG19 models, which are like tools that help us understand images better. The notebook explains how to take out important details from images and define a way to measure how close or different two images are. Then, it uses these methods to slowly change one picture's style to look more like another picture.
<!--  -->
This notebook is a good starting point for anyone interested in mixing different artistic styles in images. It helps to understand how images can be changed to look like different art styles by combining their content and artistic details.

[Read more](https://sherrys997.github.io/Deep-Learning-with-PyTorch-Neural-Style-Transfer/nb.html){target="_blank" .button}

:::

::: {.column width="5%"}
:::

::: {.column width="30%"}
![Style Transfer example](https://sherrys997.github.io/Deep-Learning-with-PyTorch-Neural-Style-Transfer/nb_files/figure-html/cell-16-output-1.png)
:::

::::